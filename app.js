function logDebug(message) {
    const debugDiv = document.getElementById('debug');
    if (debugDiv) {
        const timestamp = new Date().toISOString();
        debugDiv.style.display = 'block';
        debugDiv.innerHTML += `${timestamp}: ${message}<br>`;
        console.log(`${timestamp}: ${message}`);
    }
}

function showElement(elementId) {
    const element = document.getElementById(elementId);
    if (element) {
        element.style.display = 'block';
    }
}

function hideElement(elementId) {
    const element = document.getElementById(elementId);
    if (element) {
        element.style.display = 'none';
    }
}

function setElementClass(elementId, className) {
    const element = document.getElementById(elementId);
    if (element) {
        element.className = className;
    }
}

function disableButton(buttonId, disabled) {
    const button = document.getElementById(buttonId);
    if (button) {
        button.disabled = disabled;
    }
}

function showError(message) {
    const errorElement = document.getElementById('error');
    if (errorElement) {
        errorElement.textContent = message;
    }
    showElement('error');
    hideElement('loading');
    disableButton('submitBtn', false);
    logDebug(`Error: ${message}`);
}

function showStatus(message, type = 'warning') {
    const statusElement = document.getElementById('status');
    if (statusElement) {
        statusElement.textContent = message;
    }
    setElementClass('status', `status ${type}`);
    showElement('status');
    logDebug(`Status: ${message}`);
}

function extractVideoId(url) {
    try {
        const urlObj = new URL(url);
        const searchParams = new URLSearchParams(urlObj.search);
        
        if (urlObj.hostname === 'youtu.be') {
            return urlObj.pathname.slice(1);
        }
        
        if (urlObj.hostname === 'www.youtube.com' || urlObj.hostname === 'youtube.com') {
            return searchParams.get('v');
        }
        
        return null;
    } catch (error) {
        console.error('Error parsing URL:', error);
        return null;
    }
}

async function fetchCaptions(videoId, language, autoGenerated, provider) {
    logDebug(`Fetching captions for language: ${language}`);
    const response = await fetch(`/api/captions/${videoId}?lang=${language}&auto=${autoGenerated}&timestamps=true&provider=${provider}`);
    if (!response.ok) {
        throw new Error(await response.text());
    }
    return await response.text();
}

function formatCaptions(captions) {
    return captions.replace(/\[(\d{2}:\d{2}:\d{2})\]/g, '<span class="timestamp">[$1]</span>');
}

function updateCaptionsUI(captions, provider) {
    const captionsContent = document.getElementById('captionsContent');
    if (captionsContent) {
        const formattedCaptions = formatCaptions(captions);
        captionsContent.innerHTML = formattedCaptions;
        captionsContent.setAttribute('data-raw-captions', captions);
        captionsContent.setAttribute('data-provider', provider);
        if (['claude', 'haiku', 'sonnet'].includes(provider) && captions.length > 12000) {
            showStatus(translations[document.documentElement.lang].noteModelLimitations, 'info');
        }
    }
    showElement('captions');
}

async function handleSubmit() {
    const urlInput = document.getElementById('youtubeUrl');
    const allowAutoGenerated = document.getElementById('allowAutoGenerated');
    const languageSelect = document.getElementById('languageSelect');
    const providerSelect = document.getElementById('providerSelect');
    
    // Reset UI state
    hideElement('error');
    hideElement('status');
    hideElement('captions');
    hideElement('loading');
    const chatResponse = document.getElementById('chatResponse');
    if (chatResponse) {
        chatResponse.innerHTML = '<div class="chat-messages"></div>';
        showElement('chatResponse');
    }
    
    const url = urlInput.value.trim();
    const selectedLanguage = languageSelect.value;
    const selectedProvider = providerSelect.value;
    
    logDebug('Starting submission process');
    logDebug(`Selected language: ${selectedLanguage}`);
    logDebug(`Selected provider: ${selectedProvider}`);
    
    if (!url) {
        showError(translations[selectedLanguage].pleaseEnterUrl);
        return;
    }

    const videoId = extractVideoId(url);
    if (!videoId) {
        showError(translations[selectedLanguage].invalidUrl);
        return;
    }

    logDebug(`Video ID extracted: ${videoId}`);

    try {
        disableButton('submitBtn', true);
        translateElement('loading', selectedLanguage);
        showElement('loading');
        
        const captions = await fetchCaptions(videoId, selectedLanguage, allowAutoGenerated.checked, selectedProvider);
        logDebug(`Captions fetched, length: ${captions.length} characters`);
        
        if (!captions || captions.length === 0) {
            throw new Error(translations[selectedLanguage].noCaptions);
        }

        updateCaptionsUI(captions, selectedProvider);

        // Clear chat history when loading new video
        await fetch('/api/chat/clear', { method: 'POST' });
        
    } catch (error) {
        console.error('Error:', error);
        showError(error.message);
    } finally {
        disableButton('submitBtn', false);
        hideElement('loading');
    }
}

async function sendMessage() {
    const chatInput = document.getElementById('chatInput');
    const sendBtn = document.getElementById('sendBtn');
    const chatResponse = document.getElementById('chatResponse');
    const captionsContent = document.getElementById('captionsContent');

    // Reset error state
    hideElement('error');

    const message = chatInput.value.trim();
    if (!message) {
        showError(translations[document.documentElement.lang].pleaseEnterMessage);
        return;
    }

    // Get the captions and provider
    const captions = captionsContent ? captionsContent.getAttribute('data-raw-captions') : '';
    const provider = captionsContent ? captionsContent.getAttribute('data-provider') : '';
    
    if (!captions) {
        showError(translations[document.documentElement.lang].loadCaptionsFirst);
        return;
    }

    try {
        disableButton('sendBtn', true);
        translateElement('loading', document.documentElement.lang);
        showElement('loading');

        // Create chat messages container if it doesn't exist
        if (!chatResponse.querySelector('.chat-messages')) {
            chatResponse.innerHTML = '<div class="chat-messages"></div>';
        }
        const chatMessages = chatResponse.querySelector('.chat-messages');
        
        // Add user message
        const userMessageDiv = document.createElement('div');
        userMessageDiv.className = 'chat-message user-message';
        userMessageDiv.textContent = message;
        chatMessages.appendChild(userMessageDiv);

        // Add AI response container
        const aiResponseDiv = document.createElement('div');
        aiResponseDiv.className = 'chat-message ai-message';
        chatMessages.appendChild(aiResponseDiv);
        
        showElement('chatResponse');

        // Scroll to bottom of chat
        chatMessages.scrollTop = chatMessages.scrollHeight;

        // Send the message and handle streaming response
        const response = await fetch('/api/chat', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ message, captions, provider })
        });

        if (!response.ok) {
            throw new Error('Failed to send message');
        }

        // Create a reader for the response stream
        const reader = response.body.getReader();
        const decoder = new TextDecoder();
        let buffer = '';

        while (true) {
            const { done, value } = await reader.read();
            
            if (done) break;
            
            // Decode the chunk and add it to our buffer
            buffer += decoder.decode(value, { stream: true });
            
            // Process complete SSE messages
            const lines = buffer.split('\n');
            buffer = lines.pop() || ''; // Keep the last incomplete line in the buffer
            
            for (const line of lines) {
                if (line.startsWith('data: ')) {
                    try {
                        const data = JSON.parse(line.slice(6));
                        
                        switch (data.type) {
                            case 'chunk':
                            case 'final':
                                aiResponseDiv.innerHTML = data.html;
                                // Scroll to show the complete response
                                chatMessages.scrollTop = chatMessages.scrollHeight;
                                break;
                            case 'error':
                                showError(data.error);
                                aiResponseDiv.remove();
                                break;
                        }

                        if (data.type === 'final') {
                            // Clear input after successful send
                            chatInput.value = '';
                        }
                    } catch (e) {
                        console.error('Error parsing SSE data:', e);
                    }
                }
            }
        }

    } catch (error) {
        console.error('Error:', error);
        showError(error.message);
        if (aiResponseDiv) aiResponseDiv.remove();
    } finally {
        disableButton('sendBtn', false);
        hideElement('loading');
    }
}

// Initialize event listeners when the document is loaded
document.addEventListener('DOMContentLoaded', () => {
    // Add event listener for Enter key in chat input
    const chatInput = document.getElementById('chatInput');
    if (chatInput) {
        chatInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault(); // Prevent newline
                sendMessage();
            }
        });
    }

    // Add event listener for toggle debug button
    const toggleDebugBtn = document.getElementById('toggleDebugBtn');
    const debugDiv = document.getElementById('debug');
    if (toggleDebugBtn && debugDiv) {
        toggleDebugBtn.addEventListener('click', () => {
            debugDiv.style.display = debugDiv.style.display === 'none' ? 'block' : 'none';
        });
    }

    const languageSelect = document.getElementById('languageSelect');
    if (languageSelect) {
        languageSelect.addEventListener('change', () => {
            const selectedLanguage = languageSelect.value;
            document.documentElement.lang = selectedLanguage;
            if (selectedLanguage === 'ar') {
                document.body.classList.remove('ltr');
                document.body.dir = 'rtl';
                document.querySelector('.chat-input-container').classList.remove('ltr');
            } else {
                document.body.classList.add('ltr');
                document.body.dir = 'ltr';
                 document.querySelector('.chat-input-container').classList.add('ltr');
            }
            
            // Translate all elements with IDs
            for (const key in translations[selectedLanguage]) {
                translateElement(key, selectedLanguage);
                translatePlaceholder(key, selectedLanguage);
            }
        });
    }
    
    // Initial translation
    const initialLanguage = document.documentElement.lang;
    for (const key in translations[initialLanguage]) {
        translateElement(key, initialLanguage);
        translatePlaceholder(key, initialLanguage);
    }
});
