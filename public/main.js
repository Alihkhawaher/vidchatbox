async function fetchCaptions(videoId, language, autoGenerated) {
    logDebug(`Fetching captions for language: ${language}, auto: ${autoGenerated}`);
    try {
        const response = await fetch(`/api/captions/${videoId}?lang=${language}&auto=${autoGenerated}&timestamps=true`);
        if (!response.ok) {
            const error = await response.json();
            throw new Error(error.details || 'Failed to fetch captions');
        }
        return await response.text();
    } catch (error) {
        throw error;
    }
}

function formatCaptions(captions) {
    // First, escape any HTML in the captions
    const escaped = captions
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&#039;');

    // Then format timestamps
    return escaped.replace(/\[(\d{2}:\d{2}:\d{2})\]/g, (match, timestamp) => {
        return `<span class="timestamp">[${timestamp}]</span>`;
    });
}

function updateCaptionsUI(captions, provider) {
    const captionsContent = document.getElementById('captionsContent');
    const currentLang = document.getElementById('languageSelect').value;
    const formattedCaptions = formatCaptions(captions);
    
    // Update captions panel
    if (captionsContent) {
        captionsContent.innerHTML = formattedCaptions;
        captionsContent.setAttribute('data-raw-captions', captions);
        captionsContent.setAttribute('data-provider', provider);
        if (['claude', 'haiku', 'sonnet'].includes(provider) && captions.length > 12000) {
            showStatus(translations[currentLang].modelLimitNote, 'info');
        }
        showElement('captions');
    }

    // Add captions to chat
    const chatResponse = document.getElementById('chatResponse');
    if (chatResponse) {
        const chatMessages = chatResponse.querySelector('.chat-messages');
        if (!chatMessages) {
            chatResponse.innerHTML = '<div class="chat-messages"></div>';
        }
        const systemMessage = document.createElement('div');
        systemMessage.className = 'chat-message system-message';
        systemMessage.innerHTML = `<strong>Video Captions:</strong><br>${formattedCaptions}`;
        chatResponse.querySelector('.chat-messages').appendChild(systemMessage);
        
        // Scroll to the bottom of chat
        chatResponse.querySelector('.chat-messages').scrollTop = chatResponse.querySelector('.chat-messages').scrollHeight;
        
        showElement('chatResponse');
    }
}

function updateUILanguage(language) {
    const currentTranslations = translations[language];
    
    // Update title
    const titleElement = document.querySelector('h1');
    if (titleElement) {
        titleElement.textContent = currentTranslations.title;
    }
    
    // Update input placeholders
    const youtubeUrl = document.getElementById('youtubeUrl');
    const chatInput = document.getElementById('chatInput');
    if (youtubeUrl) youtubeUrl.placeholder = currentTranslations.urlPlaceholder;
    if (chatInput) chatInput.placeholder = currentTranslations.chatPlaceholder;
    
    // Update buttons
    const submitBtn = document.getElementById('submitBtn');
    const settingsBtn = document.getElementById('settingsBtn');
    if (submitBtn) submitBtn.textContent = currentTranslations.buttons.submit;
    if (settingsBtn) settingsBtn.textContent = currentTranslations.buttons.settings;
    
    // Update labels
    const autoGeneratedLabel = document.getElementById('allowAutoGenerated')?.nextElementSibling;
    if (autoGeneratedLabel) {
        autoGeneratedLabel.textContent = currentTranslations.allowAutoGenerated;
    }
    
    // Update loading text if visible
    const loadingElement = document.getElementById('loading');
    if (loadingElement && loadingElement.style.display !== 'none') {
        loadingElement.textContent = currentTranslations.processingCaptions;
    }
    
    // Update provider select options
    const providerSelect = document.getElementById('providerSelect');
    if (providerSelect) {
        Array.from(providerSelect.options).forEach(option => {
            option.textContent = currentTranslations.providers[option.value];
        });
    }

    // Update settings modal
    const modalTitle = document.querySelector('.modal-header h2');
    const cancelBtn = document.querySelector('#cancelSettings');
    const saveBtn = document.querySelector('#settingsForm button[type="submit"]');
    const debugLabel = document.querySelector('label[for="debugMode"] span');
    if (modalTitle) modalTitle.textContent = currentTranslations.settings.title;
    if (cancelBtn) cancelBtn.textContent = currentTranslations.settings.cancel;
    if (saveBtn) saveBtn.textContent = currentTranslations.settings.save;
    if (debugLabel) debugLabel.textContent = currentTranslations.settings.enableDebug;
}

// Settings Management
function loadSettings() {
    try {
        const settings = JSON.parse(localStorage.getItem('apiSettings')) || {};
        const googleApiKey = document.getElementById('googleApiKey');
        const claudeApiKey = document.getElementById('claudeApiKey');
        const debugMode = document.getElementById('debugMode');
        
        if (googleApiKey) googleApiKey.value = settings.googleApiKey || '';
        if (claudeApiKey) claudeApiKey.value = settings.claudeApiKey || '';
        if (debugMode) debugMode.checked = settings.debugMode || false;
        
        // Update debug panel visibility
        const debugPanel = document.getElementById('debug');
        if (debugPanel) {
            debugPanel.style.display = settings.debugMode ? 'block' : 'none';
        }
        
        return settings;
    } catch (error) {
        console.error('Error loading settings:', error);
        return {};
    }
}

function saveSettings(settings) {
    try {
        localStorage.setItem('apiSettings', JSON.stringify(settings));
        return true;
    } catch (error) {
        console.error('Error saving settings:', error);
        return false;
    }
}

// Modal Management
function setupSettingsModal() {
    const modal = document.getElementById('settingsModal');
    const settingsBtn = document.getElementById('settingsBtn');
    const closeBtn = document.querySelector('.close');
    const cancelBtn = document.getElementById('cancelSettings');
    const settingsForm = document.getElementById('settingsForm');
    const debugMode = document.getElementById('debugMode');
    const debugPanel = document.getElementById('debug');

    if (!modal || !settingsBtn || !closeBtn || !cancelBtn || !settingsForm) {
        console.error('Settings modal elements not found');
        return;
    }

    settingsBtn.onclick = () => {
        modal.classList.add('is-active');
        loadSettings();
    };

    const closeModal = () => {
        modal.classList.remove('is-active');
    };

    closeBtn.onclick = closeModal;
    cancelBtn.onclick = closeModal;
    modal.querySelector('.modal-background').onclick = closeModal;

    // Handle debug mode toggle
    debugMode.onchange = (e) => {
        debugPanel.style.display = e.target.checked ? 'block' : 'none';
    };

    settingsForm.onsubmit = (e) => {
        e.preventDefault();
        const currentLang = document.getElementById('languageSelect')?.value || 'en';
        const settings = {
            googleApiKey: document.getElementById('googleApiKey')?.value.trim() || '',
            claudeApiKey: document.getElementById('claudeApiKey')?.value.trim() || '',
            debugMode: document.getElementById('debugMode')?.checked || false
        };
        
        if (saveSettings(settings)) {
            showStatus(translations[currentLang].settings.saved, 'success');
            closeModal();
            debugPanel.style.display = settings.debugMode ? 'block' : 'none';
            logDebug('Settings saved:', { 
                googleKeySet: !!settings.googleApiKey,
                claudeKeySet: !!settings.claudeApiKey,
                debugMode: settings.debugMode
            });
        } else {
            showError(translations[currentLang].settings.error);
        }
    };
}

async function handleSubmit() {
    const urlInput = document.getElementById('youtubeUrl');
    const allowAutoGenerated = document.getElementById('allowAutoGenerated');
    const languageSelect = document.getElementById('languageSelect');
    const providerSelect = document.getElementById('providerSelect');
    const captionLanguage = document.getElementById('captionLanguage');
    const currentLang = languageSelect?.value || 'en';
    
    // Reset UI state
    hideElement('error');
    hideElement('status');
    hideElement('captions');
    hideElement('loading');
    
    const url = urlInput?.value.trim() || '';
    const selectedLanguage = captionLanguage?.value || 'en';
    const selectedProvider = providerSelect?.value || 'google';
    
    logDebug('Starting submission process');
    logDebug(`Selected UI language: ${currentLang}`);
    logDebug(`Selected caption language: ${selectedLanguage}`);
    logDebug(`Selected provider: ${selectedProvider}`);
    logDebug(`Allow auto-generated: ${allowAutoGenerated?.checked}`);
    
    if (!url) {
        showError(translations[currentLang].errors.enterUrl);
        return;
    }

    const videoId = extractVideoId(url);
    if (!videoId) {
        showError(translations[currentLang].errors.invalidUrl);
        return;
    }

    logDebug(`Video ID extracted: ${videoId}`);

    try {
        disableButton('submitBtn', true);
        setElementText('loading', translations[currentLang].processingCaptions);
        showElement('loading');
        
        const captions = await fetchCaptions(videoId, selectedLanguage, allowAutoGenerated?.checked || false);
        logDebug(`Captions fetched, length: ${captions.length} characters`);
        
        if (!captions || captions.length === 0) {
            throw new Error(translations[currentLang].errors.noCaptions);
        }

        // Clear chat history when loading new video
        await fetch('/api/chat/clear', { method: 'POST' });
        
        // Reset chat UI
        const chatResponse = document.getElementById('chatResponse');
        if (chatResponse) {
            chatResponse.innerHTML = '<div class="chat-messages"></div>';
            showElement('chatResponse');
        }

        // Update UI with captions
        updateCaptionsUI(captions, selectedProvider);
        
    } catch (error) {
        console.error('Error:', error);
        showError(error.message);
    } finally {
        disableButton('submitBtn', false);
        hideElement('loading');
    }
}

async function sendMessage() {
    const chatInput = document.getElementById('chatInput');
    const sendBtn = document.getElementById('sendBtn');
    const chatResponse = document.getElementById('chatResponse');
    const captionsContent = document.getElementById('captionsContent');
    const providerSelect = document.getElementById('providerSelect');
    const currentLang = document.getElementById('languageSelect')?.value || 'en';

    // Reset error state
    hideElement('error');

    const message = chatInput?.value.trim() || '';
    if (!message) {
        showError(translations[currentLang].errors.enterMessage);
        return;
    }

    // Get the captions and provider
    const captions = captionsContent ? captionsContent.getAttribute('data-raw-captions') : '';
    const provider = captionsContent?.getAttribute('data-provider') || providerSelect?.value || 'claude';

    let aiResponseDiv;
    try {
        disableButton('sendBtn', true);
        setElementText('loading', translations[currentLang].processingMessage);
        showElement('loading');

        // Create chat messages container if it doesn't exist
        if (!chatResponse.querySelector('.chat-messages')) {
            chatResponse.innerHTML = '<div class="chat-messages"></div>';
        }
        const chatMessages = chatResponse.querySelector('.chat-messages');
        
        // Add user message
        const userMessageDiv = document.createElement('div');
        userMessageDiv.className = 'chat-message user-message';
        userMessageDiv.textContent = message;
        chatMessages.appendChild(userMessageDiv);

        // Add AI response container
        aiResponseDiv = document.createElement('div');
        aiResponseDiv.className = 'chat-message ai-message';
        chatMessages.appendChild(aiResponseDiv);
        
        showElement('chatResponse');

        // Scroll to bottom of chat
        chatMessages.scrollTop = chatMessages.scrollHeight;

        // Get API settings and prepare headers
        const settings = loadSettings();
        const headers = {
            'Content-Type': 'application/json'
        };

        // Add the appropriate API key based on provider
        if (provider === 'google' && settings.googleApiKey) {
            headers['X-API-Key'] = settings.googleApiKey;
            logDebug('Using Google API key');
        } else if (['claude', 'haiku', 'sonnet'].includes(provider) && settings.claudeApiKey) {
            headers['X-API-Key'] = settings.claudeApiKey;
            logDebug('Using Claude API key');
        }

        // Send the message and handle streaming response
        const response = await fetch('/api/chat', {
            method: 'POST',
            headers,
            body: JSON.stringify({ message, captions, provider })
        });

        if (!response.ok) {
            const errorData = await response.json().catch(() => ({ message: translations[currentLang].errors.sendFailed }));
            throw new Error(errorData.message || translations[currentLang].errors.sendFailed);
        }

        // Create a reader for the response stream
        const reader = response.body.getReader();
        const decoder = new TextDecoder();
        let buffer = '';

        while (true) {
            const { done, value } = await reader.read();
            
            if (done) break;
            
            // Decode the chunk and add it to our buffer
            buffer += decoder.decode(value, { stream: true });
            
            // Process complete SSE messages
            const lines = buffer.split('\n');
            buffer = lines.pop() || ''; // Keep the last incomplete line in the buffer
            
            for (const line of lines) {
                if (line.startsWith('data: ')) {
                    try {
                        const data = JSON.parse(line.slice(6));
                        
                        switch (data.type) {
                            case 'chunk':
                            case 'final':
                                aiResponseDiv.innerHTML = data.html || data.markdown || data.error || 'No response content';
                                // Scroll to show the complete response
                                chatMessages.scrollTop = chatMessages.scrollHeight;
                                break;
                            case 'error':
                                const errorMessage = typeof data.error === 'object' ? 
                                    (data.error.message || JSON.stringify(data.error)) : 
                                    data.error || translations[currentLang].errors.sendFailed;
                                showError(errorMessage);
                                if (aiResponseDiv) aiResponseDiv.remove();
                                break;
                        }

                        if (data.type === 'final') {
                            // Clear input after successful send
                            if (chatInput) chatInput.value = '';
                        }
                    } catch (e) {
                        console.error('Error parsing SSE data:', e);
                        showError(translations[currentLang].errors.sendFailed);
                        if (aiResponseDiv) aiResponseDiv.remove();
                    }
                }
            }
        }

    } catch (error) {
        console.error('Error:', error);
        showError(error.message || translations[currentLang].errors.sendFailed);
        if (aiResponseDiv) aiResponseDiv.remove();
    } finally {
        disableButton('sendBtn', false);
        hideElement('loading');
    }
}

document.addEventListener('DOMContentLoaded', () => {
    const languageSelect = document.getElementById('languageSelect');
    const htmlTag = document.querySelector('html');
    const chatInput = document.getElementById('chatInput');

    if (!languageSelect || !htmlTag) {
        console.error('Required elements not found');
        return;
    }

    // Set initial language from localStorage or default to 'en'
    const savedLang = localStorage.getItem('selectedLanguage') || 'en';
    languageSelect.value = savedLang;
    document.documentElement.lang = savedLang;
    document.documentElement.dir = savedLang === 'ar' ? 'rtl' : 'ltr';
    updateUILanguage(savedLang);

    // Setup settings modal
    setupSettingsModal();

    // Load initial settings
    loadSettings();

    // Add Enter key handler for chat input
    if (chatInput) {
        chatInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                sendMessage();
            }
        });
    }

    languageSelect.addEventListener('change', () => {
        const selectedLanguage = languageSelect.value;
        localStorage.setItem('selectedLanguage', selectedLanguage);
        document.documentElement.lang = selectedLanguage;
        document.documentElement.dir = selectedLanguage === 'ar' ? 'rtl' : 'ltr';
        updateUILanguage(selectedLanguage);
    });
});
