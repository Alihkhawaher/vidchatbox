async function fetchCaptions(videoId, language, autoGenerated, provider) {
    logDebug(`Fetching captions for language: ${language}`);
    const response = await fetch(`/api/captions/${videoId}?lang=${language}&auto=${autoGenerated}&timestamps=true&provider=${provider}`);
    if (!response.ok) {
        throw new Error(await response.text());
    }
    return await response.text();
}

async function fetchVideoInfo(videoId) {
    logDebug(`Fetching video info for video ID: ${videoId}`);
    const response = await fetch(`/api/video-info/${videoId}`);
    if (!response.ok) {
        throw new Error(await response.text());
    }
    return await response.json();
}

function formatCaptions(captions) {
    return captions.replace(/\[(\d{2}:\d{2}:\d{2})\]/g, '<span class="timestamp">[$1]</span>');
}

function formatMessage(text) {
    // First escape any HTML to prevent XSS
    const escaped = text.replace(/[&<>"']/g, char => ({
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#39;'
    }[char]));

    // Replace newlines with <br> tags
    const withLineBreaks = escaped.replace(/\n/g, '<br>');

    // Add additional styling for better readability
    return `<div class="formatted-message">${withLineBreaks}</div>`;
}

function updateUILanguage(language) {
    const currentTranslations = translations[language];
    
    // Update title
    document.querySelector('h1').textContent = currentTranslations.title;
    
    // Update input placeholders
    document.getElementById('youtubeUrl').placeholder = currentTranslations.urlPlaceholder;
    document.getElementById('chatInput').placeholder = currentTranslations.chatPlaceholder;
    
    // Update buttons
    document.getElementById('submitBtn').textContent = currentTranslations.buttons.submit;
    document.getElementById('toggleDebugBtn').textContent = currentTranslations.buttons.toggleDebug;
    
    // Update labels
    document.getElementById('allowAutoGenerated').nextElementSibling.textContent = currentTranslations.allowAutoGenerated;
    
    // Update loading text if visible
    const loadingElement = document.getElementById('loading');
    if (loadingElement.style.display !== 'none') {
        loadingElement.textContent = currentTranslations.processingCaptions;
    }
    
    // Update provider select options
    const providerSelect = document.getElementById('providerSelect');
    Array.from(providerSelect.options).forEach(option => {
        option.textContent = currentTranslations.providers[option.value];
    });
}

async function handleSubmit() {
    const urlInput = document.getElementById('youtubeUrl');
    const allowAutoGenerated = document.getElementById('allowAutoGenerated');
    const languageSelect = document.getElementById('languageSelect');
    const providerSelect = document.getElementById('providerSelect');
    const currentLang = languageSelect.value;
    
    // Reset UI state
    hideElement('error');
    hideElement('status');
    hideElement('captions');
    hideElement('loading');
    const chatResponse = document.getElementById('chatResponse');
    if (chatResponse) {
        chatResponse.innerHTML = '<div class="chat-messages"></div>';
        showElement('chatResponse');
    }
    
    const url = urlInput.value.trim();
    const selectedLanguage = languageSelect.value;
    const selectedProvider = providerSelect.value;
    
    logDebug('Starting submission process');
    logDebug(`Selected language: ${selectedLanguage}`);
    logDebug(`Selected provider: ${selectedProvider}`);
    
    if (!url) {
        showError(translations[currentLang].errors.enterUrl);
        return;
    }

    const videoId = extractVideoId(url);
    if (!videoId) {
        showError(translations[currentLang].errors.invalidUrl);
        return;
    }

    logDebug(`Video ID extracted: ${videoId}`);

    try {
        disableButton('submitBtn', true);
        setElementText('loading', translations[currentLang].processingCaptions);
        showElement('loading');

        // Clear chat history when loading new video
        await fetch('/api/chat/clear', { method: 'POST' });

        // First fetch video info
        const videoInfo = await fetchVideoInfo(videoId);
        
        // Add video info to chat history
        const chatMessages = chatResponse.querySelector('.chat-messages');
        const videoInfoDiv = document.createElement('div');
        videoInfoDiv.className = 'chat-message ai-message';
        videoInfoDiv.innerHTML = formatMessage(videoInfo.formattedMessage);
        chatMessages.appendChild(videoInfoDiv);
        
        // Then fetch captions
        const captions = await fetchCaptions(videoId, selectedLanguage, allowAutoGenerated.checked, selectedProvider);
        logDebug(`Captions fetched, length: ${captions.length} characters`);
        
        if (!captions || captions.length === 0) {
            throw new Error(translations[currentLang].errors.noCaptions);
        }

        // Update both chat history and captions UI with the same captions
        const captionsDiv = document.createElement('div');
        captionsDiv.className = 'chat-message ai-message';
        captionsDiv.innerHTML = formatMessage(captions);
        chatMessages.appendChild(captionsDiv);

        // Store captions in the UI for later use
        const captionsContent = document.getElementById('captionsContent');
        if (captionsContent) {
            captionsContent.setAttribute('data-raw-captions', captions);
            captionsContent.setAttribute('data-provider', selectedProvider);
        }
        
    } catch (error) {
        console.error('Error:', error);
        showError(error.message);
    } finally {
        disableButton('submitBtn', false);
        hideElement('loading');
    }
}

async function sendMessage() {
    const chatInput = document.getElementById('chatInput');
    const sendBtn = document.getElementById('sendBtn');
    const chatResponse = document.getElementById('chatResponse');
    const captionsContent = document.getElementById('captionsContent');
    const currentLang = document.getElementById('languageSelect').value;

    // Reset error state
    hideElement('error');

    const message = chatInput.value.trim();
    if (!message) {
        showError(translations[currentLang].errors.enterMessage);
        return;
    }

    // Get the captions and provider
    const captions = captionsContent ? captionsContent.getAttribute('data-raw-captions') : '';
    const provider = captionsContent ? captionsContent.getAttribute('data-provider') : '';
    
    if (!captions) {
        showError(translations[currentLang].errors.loadCaptions);
        return;
    }

    try {
        disableButton('sendBtn', true);
        setElementText('loading', translations[currentLang].processingMessage);
        showElement('loading');

        // Create chat messages container if it doesn't exist
        if (!chatResponse.querySelector('.chat-messages')) {
            chatResponse.innerHTML = '<div class="chat-messages"></div>';
        }
        const chatMessages = chatResponse.querySelector('.chat-messages');
        
        // Add user message
        const userMessageDiv = document.createElement('div');
        userMessageDiv.className = 'chat-message user-message';
        userMessageDiv.textContent = message;
        chatMessages.appendChild(userMessageDiv);

        // Add AI response container
        const aiResponseDiv = document.createElement('div');
        aiResponseDiv.className = 'chat-message ai-message';
        chatMessages.appendChild(aiResponseDiv);
        
        showElement('chatResponse');

        // Scroll to bottom of chat
        chatMessages.scrollTop = chatMessages.scrollHeight;

        // Send the message and handle streaming response
        const response = await fetch('/api/chat', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ message, captions, provider })
        });

        if (!response.ok) {
            throw new Error(translations[currentLang].errors.sendFailed);
        }

        // Create a reader for the response stream
        const reader = response.body.getReader();
        const decoder = new TextDecoder();
        let buffer = '';

        while (true) {
            const { done, value } = await reader.read();
            
            if (done) break;
            
            // Decode the chunk and add it to our buffer
            buffer += decoder.decode(value, { stream: true });
            
            // Process complete SSE messages
            const lines = buffer.split('\n');
            buffer = lines.pop() || ''; // Keep the last incomplete line in the buffer
            
            for (const line of lines) {
                if (line.startsWith('data: ')) {
                    try {
                        const data = JSON.parse(line.slice(6));
                        
                        switch (data.type) {
                            case 'chunk':
                            case 'final':
                                // Format the response with markdown support
                                aiResponseDiv.innerHTML = formatMessage(data.html);
                                // Scroll to show the complete response
                                chatMessages.scrollTop = chatMessages.scrollHeight;
                                break;
                            case 'error':
                                showError(data.error);
                                aiResponseDiv.remove();
                                break;
                        }

                        if (data.type === 'final') {
                            // Clear input after successful send
                            chatInput.value = '';
                        }
                    } catch (e) {
                        console.error('Error parsing SSE data:', e);
                    }
                }
            }
        }

    } catch (error) {
        console.error('Error:', error);
        showError(error.message);
        if (aiResponseDiv) aiResponseDiv.remove();
    } finally {
        disableButton('sendBtn', false);
        hideElement('loading');
    }
}

document.addEventListener('DOMContentLoaded', () => {
    const languageSelect = document.getElementById('languageSelect');
    const htmlTag = document.querySelector('html');

    // Set initial language
    const initialLanguage = languageSelect.value;
    updateUILanguage(initialLanguage);

    languageSelect.addEventListener('change', () => {
        const selectedLanguage = languageSelect.value;
        htmlTag.setAttribute('lang', selectedLanguage);
        if (selectedLanguage === 'ar') {
            htmlTag.setAttribute('dir', 'rtl');
        } else {
            htmlTag.setAttribute('dir', 'ltr');
        }
        updateUILanguage(selectedLanguage);
    });
});
