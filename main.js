async function fetchCaptions(videoId, language, autoGenerated, provider) {
    logDebug(`Fetching captions for language: ${language}`);
    
    // First get the list of available caption tracks
    const trackListUrl = `https://www.youtube.com/api/timedtext?type=list&v=${videoId}`;
    const trackListResponse = await fetch(trackListUrl);
    if (!trackListResponse.ok) {
        throw new Error('Failed to fetch caption tracks');
    }
    const trackListText = await trackListResponse.text();
    
    // Parse the XML response to find available tracks
    const tracks = trackListText.match(/<track([^>]*)>/g) || [];
    logDebug('Available caption tracks:', tracks);

    // Find the appropriate track based on language and type
    let targetTrack = null;
    for (const track of tracks) {
        const langMatch = track.match(/lang_code="([^"]+)"/);
        const langOriginal = track.match(/lang_original="([^"]+)"/);
        const isAuto = track.includes('kind="asr"');
        
        if (langMatch && (langMatch[1] === language || langOriginal?.[1] === language) && isAuto === autoGenerated) {
            targetTrack = track;
            break;
        }
    }

    if (!targetTrack) {
        throw new Error(`No ${autoGenerated ? 'auto-generated' : 'manual'} captions found for language: ${language}`);
    }

    // Extract lang_code from the found track
    const langCodeMatch = targetTrack.match(/lang_code="([^"]+)"/);
    const langCode = langCodeMatch ? langCodeMatch[1] : language;

    // Fetch the actual captions using the correct language code
    const captionsUrl = `https://www.youtube.com/api/timedtext?fmt=json3&v=${videoId}&lang=${langCode}${autoGenerated ? '&kind=asr' : ''}`;
    const captionsResponse = await fetch(captionsUrl);
    if (!captionsResponse.ok) {
        throw new Error('Failed to fetch captions');
    }
    const captionsData = await captionsResponse.json();

    if (!captionsData?.events) {
        throw new Error(`No captions found for language: ${language}`);
    }

    // Format captions with timestamps
    const formattedCaptions = captionsData.events
        .map(event => {
            const startTime = event.tStartMs / 1000;
            const hours = Math.floor(startTime / 3600);
            const minutes = Math.floor((startTime % 3600) / 60);
            const seconds = Math.floor(startTime % 60);
            const timestamp = `[${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}]`;
            const text = event.segs ? event.segs.map(seg => seg.utf8).join(' ') : '';
            return text.trim() ? `${timestamp} ${text}` : '';
        })
        .filter(Boolean)
        .join('\n');

    logDebug(`Captions fetched, length: ${formattedCaptions.length} characters`);
    return formattedCaptions;
}

// ... rest of the main.js file remains unchanged ...
