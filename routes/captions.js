const express = require('express');
const router = express.Router();
const { getSubtitles } = require('youtube-captions-scraper');
const { ApiError, ErrorTypes } = require('../utils/api-utils');

class CaptionsService {
    static formatTimestamp(seconds) {
        const hours = Math.floor(seconds / 3600);
        const minutes = Math.floor((seconds % 3600) / 60);
        const secs = seconds % 60;
        return `[${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}]`;
    }

    static formatCaptions(captions, includeTimestamps = true) {
        return captions
            .map(caption => {
                if (includeTimestamps) {
                    const timestamp = this.formatTimestamp(Math.floor(caption.start));
                    return `${timestamp} ${caption.text}`;
                }
                return caption.text;
            })
            .join('\n')
            .trim();
    }

    static async fetchCaptions(videoId, lang = 'en', auto = false) {
        try {
            const captions = await getSubtitles({
                videoID: videoId,
                lang: lang,
                ...(auto && { auto: true })
            });

            if (!captions || captions.length === 0) {
                return null;
            }

            return captions;
        } catch (error) {
            console.log(`${auto ? 'Auto-generated' : 'Manual'} captions not found:`, error.message);
            return null;
        }
    }

    static extractVideoId(url) {
        const match = url.match(/(?:youtube\.com\/(?:[^\/]+\/.+\/|(?:v|e(?:mbed)?)\/|.*[?&]v=)|youtu\.be\/)([^"&?\/\s]{11})/);
        if (!match) {
            throw new ApiError(ErrorTypes.VALIDATION, 'Invalid YouTube URL');
        }
        return match[1];
    }
}

// Legacy endpoint for v3 compatibility
router.get('/:videoId', async (req, res) => {
    const videoId = req.params.videoId;
    const lang = req.query.lang || 'en';
    const allowAuto = req.query.auto === 'true';
    const includeTimestamps = req.query.timestamps === 'true';
    
    console.log(`${new Date().toISOString()} - Fetching captions for video ID: ${videoId}`);
    console.log(`Language: ${lang}, Allow Auto-generated: ${allowAuto}`);

    try {
        // Try manual captions first
        let captions = await CaptionsService.fetchCaptions(videoId, lang, false);

        // If manual captions aren't available and auto-generated are allowed, try those
        if (!captions && allowAuto) {
            console.log('Attempting to fetch auto-generated captions...');
            captions = await CaptionsService.fetchCaptions(videoId, lang, true);
        }

        if (!captions) {
            throw new ApiError(
                ErrorTypes.API,
                `This video does not have any ${allowAuto ? '' : 'manual '}captions available. Please try a different video.`,
                404
            );
        }

        const formattedCaptions = CaptionsService.formatCaptions(captions, includeTimestamps);
        console.log(`Successfully fetched captions. Length: ${formattedCaptions.length} characters`);
        res.send(formattedCaptions);

    } catch (error) {
        console.error('Error processing request:', error);
        
        const status = error instanceof ApiError ? error.status : 404;
        res.status(status).json({
            error: 'Captions not found',
            videoId,
            language: lang,
            autoGenerated: allowAuto,
            details: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

// New endpoint for v4
router.get('/fetch', async (req, res) => {
    try {
        const { url, auto = 'true' } = req.query;
        if (!url) {
            throw new ApiError(ErrorTypes.VALIDATION, 'URL parameter is required', 400);
        }

        const videoId = CaptionsService.extractVideoId(url);
        const lang = 'en';
        const allowAuto = auto === 'true';

        console.log(`${new Date().toISOString()} - Fetching captions for video ID: ${videoId}`);
        console.log(`Language: ${lang}, Allow Auto-generated: ${allowAuto}`);

        // Try manual captions first
        let captions = await CaptionsService.fetchCaptions(videoId, lang, false);
        let isAutoGenerated = false;

        // If manual captions aren't available and auto-generated are allowed, try those
        if (!captions && allowAuto) {
            console.log('Attempting to fetch auto-generated captions...');
            captions = await CaptionsService.fetchCaptions(videoId, lang, true);
            isAutoGenerated = true;
        }

        if (!captions) {
            throw new ApiError(
                ErrorTypes.API,
                `This video does not have any ${allowAuto ? '' : 'manual '}captions available. Please try a different video.`,
                404
            );
        }

        const formattedCaptions = CaptionsService.formatCaptions(captions, true);
        console.log(`Successfully fetched ${isAutoGenerated ? 'auto-generated' : 'manual'} captions. Length: ${formattedCaptions.length} characters`);

        res.json({
            captions: {
                playerCaptionsTracklistRenderer: {
                    captionTracks: [{
                        languageCode: lang,
                        name: { 
                            simpleText: `English${isAutoGenerated ? ' (auto-generated)' : ''}`
                        },
                        baseUrl: formattedCaptions
                    }]
                }
            }
        });

    } catch (error) {
        console.error('Error fetching captions:', error);
        
        const status = error instanceof ApiError ? error.status : 404;
        res.status(status).json({ 
            error: 'Captions not found',
            details: error.message,
            timestamp: new Date().toISOString()
        });
    }
});

module.exports = router;
