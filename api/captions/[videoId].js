const axios = require('axios');

function formatCaptions(captions, includeTimestamps) {
    return captions
        .map(caption => {
            if (includeTimestamps) {
                const startTime = Math.floor(caption.start);
                const hours = Math.floor(startTime / 3600);
                const minutes = Math.floor((startTime % 3600) / 60);
                const seconds = startTime % 60;
                const timestamp = `[${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}]`;
                return `${timestamp} ${caption.text}`;
            }
            return caption.text;
        })
        .join('\n')
        .trim();
}

async function fetchCaptions(videoId, lang, auto = false) {
    const endpoint = `https://www.youtube.com/api/timedtext?v=${videoId}&lang=${lang}${auto ? '&kind=asr' : ''}&fmt=json3`;
    const response = await axios.get(endpoint);
    
    if (!response.data?.events) {
        throw new Error(`No ${auto ? 'auto-generated' : 'manual'} captions found for language: ${lang}`);
    }

    return response.data.events
        .map(event => ({
            start: event.tStartMs / 1000,
            dur: (event.dDurationMs || 0) / 1000,
            text: event.segs ? event.segs.map(seg => seg.utf8).join(' ') : ''
        }))
        .filter(caption => caption.text.trim());
}

module.exports = async (req, res) => {
    // Enable CORS
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
    res.setHeader('Content-Type', 'text/plain; charset=utf-8');

    if (req.method === 'OPTIONS') return res.status(200).end();
    if (req.method !== 'GET') return res.status(405).json({ error: 'Method not allowed' });

    const videoId = req.url.split('/').pop().split('?')[0];
    const lang = req.query.lang || 'en';
    const allowAuto = req.query.auto === 'true';
    const includeTimestamps = req.query.timestamps === 'true';
    
    if (!videoId) {
        return res.status(400).json({
            error: 'Missing video ID',
            timestamp: new Date().toISOString()
        });
    }

    console.log(`Fetching captions for video ID: ${videoId}`);
    console.log(`Language: ${lang}, Allow Auto-generated: ${allowAuto}, Include Timestamps: ${includeTimestamps}`);

    try {
        // Try manual captions first
        try {
            const captions = await fetchCaptions(videoId, lang, false);
            const fullText = formatCaptions(captions, includeTimestamps);
            console.log(`Successfully fetched manual captions. Length: ${fullText.length} characters`);
            return res.status(200).send(fullText);
        } catch (error) {
            console.log('Manual captions not available:', error.message);
        }

        // Try auto-generated captions if allowed
        if (allowAuto) {
            try {
                const captions = await fetchCaptions(videoId, lang, true);
                const fullText = formatCaptions(captions, includeTimestamps);
                console.log(`Successfully fetched auto-generated captions. Length: ${fullText.length} characters`);
                return res.status(200).send(fullText);
            } catch (error) {
                console.log('Auto-generated captions not available:', error.message);
            }
        }

        throw new Error(`No ${allowAuto ? 'manual or auto-generated' : 'manual'} captions found for language: ${lang}`);

    } catch (error) {
        console.error('Error processing request:', error);
        return res.status(404).json({
            error: 'Captions not found',
            videoId,
            language: lang,
            autoGenerated: allowAuto,
            details: error.message,
            timestamp: new Date().toISOString()
        });
    }
};
